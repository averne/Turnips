// ftpd is a server implementation based on the following:
// - RFC  959 (https://tools.ietf.org/html/rfc959)
// - RFC 3659 (https://tools.ietf.org/html/rfc3659)
// - suggested implementation details from https://cr.yp.to/ftp/filesystem.html
//
// The MIT License (MIT)
//
// Copyright (C) 2020 Michael Theall
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include "imgui_nx.h"
#include <imgui.h>

#include <cstring>
#include <array>
#include <chrono>
#include <functional>
#include <string>
#include <utility>
#include <switch.h>

using namespace std::chrono_literals;

namespace {

std::chrono::steady_clock::time_point s_lastMouseUpdate;

float s_width  = 1280.0f;
float s_height = 720.0f;

ImVec2 s_mousePos = ImVec2(0.0f, 0.0f);

AppletHookCookie s_appletHookCookie;

PadState s_pad;

ImWchar const nxFontRanges[] = {
    // Autogenerated, do not edit
    0x000a, 0x000a, 0x0020, 0x0021, 0x0023, 0x0023, 0x0025, 0x0029, 0x002c, 0x0032, 0x0034, 0x0034, 0x003a, 0x003a, 0x0041, 0x0057,
    0x005a, 0x005a, 0x0061, 0x007a, 0x00a0, 0x00a1, 0x00c9, 0x00c9, 0x00df, 0x00e1, 0x00e3, 0x00e4, 0x00e7, 0x00ea, 0x00ec, 0x00ec,
    0x00f1, 0x00f1, 0x00f3, 0x00f3, 0x00f6, 0x00f6, 0x00fa, 0x00fa, 0x00fc, 0x00fc, 0x0105, 0x0105, 0x0107, 0x0107, 0x0119, 0x0119,
    0x0142, 0x0142, 0x015a, 0x015b, 0x017c, 0x017c, 0x3001, 0x3001, 0x3043, 0x3047, 0x304b, 0x304b, 0x304d, 0x304f, 0x3053, 0x3053,
    0x3055, 0x3055, 0x3057, 0x3057, 0x3059, 0x3059, 0x3061, 0x3061, 0x3066, 0x3066, 0x3068, 0x3068, 0x306a, 0x306c, 0x306e, 0x306e,
    0x3073, 0x3073, 0x3075, 0x3075, 0x307e, 0x307e, 0x3082, 0x3082, 0x3084, 0x3084, 0x308b, 0x308b, 0x308f, 0x308f, 0x3092, 0x3093,
    0x30a1, 0x30a1, 0x30a3, 0x30a4, 0x30a6, 0x30a7, 0x30ab, 0x30ad, 0x30af, 0x30b0, 0x30b5, 0x30b9, 0x30bb, 0x30bb, 0x30bf, 0x30bf,
    0x30c3, 0x30c3, 0x30c6, 0x30c6, 0x30c9, 0x30c9, 0x30cf, 0x30d1, 0x30d5, 0x30d7, 0x30d9, 0x30d9, 0x30e1, 0x30e1, 0x30e7, 0x30e7,
    0x30e9, 0x30ec, 0x30f3, 0x30f4, 0x30fc, 0x30fc, 0x4e00, 0x4e00, 0x4e09, 0x4e0b, 0x4e0d, 0x4e0d, 0x4e2a, 0x4e2a, 0x4e2d, 0x4e2d,
    0x4e70, 0x4e70, 0x4e88, 0x4e88, 0x4e8c, 0x4e8c, 0x4e94, 0x4e94, 0x4ee5, 0x4ee5, 0x4ef7, 0x4ef7, 0x4efb, 0x4efb, 0x4f53, 0x4f53,
    0x4f55, 0x4f55, 0x4f5b, 0x4f5b, 0x4fa1, 0x4fa1, 0x4fdd, 0x4fde, 0x503c, 0x503c, 0x5085, 0x5085, 0x50f9, 0x50f9, 0x513f, 0x513f,
    0x514b, 0x514b, 0x5165, 0x5165, 0x516d, 0x516d, 0x5206, 0x5206, 0x5217, 0x5217, 0x5229, 0x5229, 0x523b, 0x523b, 0x524d, 0x524d,
    0x529b, 0x529b, 0x52a8, 0x52a8, 0x52bf, 0x52bf, 0x52d5, 0x52d5, 0x5317, 0x5317, 0x5348, 0x5348, 0x534a, 0x534a, 0x5357, 0x5357,
    0x535c, 0x535c, 0x53e4, 0x53e4, 0x53ef, 0x53ef, 0x53f7, 0x53f8, 0x5415, 0x5415, 0x5468, 0x5468, 0x548c, 0x548c, 0x54c8, 0x54c8,
    0x554f, 0x554f, 0x56db, 0x56db, 0x56fe, 0x56fe, 0x5716, 0x5716, 0x571f, 0x571f, 0x5728, 0x5728, 0x5747, 0x5747, 0x5904, 0x5904,
    0x5909, 0x5909, 0x5927, 0x5927, 0x5929, 0x5929, 0x592b, 0x592b, 0x5b50, 0x5b50, 0x5b58, 0x5b58, 0x5ba2, 0x5ba2, 0x5c0f, 0x5c0f,
    0x5c11, 0x5c11, 0x5c9a, 0x5c9a, 0x5cf0, 0x5cf0, 0x5df2, 0x5df2, 0x5e03, 0x5e03, 0x5e73, 0x5e73, 0x5e7d, 0x5e7d, 0x5ef7, 0x5ef7,
    0x5f0f, 0x5f0f, 0x5f48, 0x5f48, 0x5f8c, 0x5f8c, 0x5fb7, 0x5fb7, 0x6240, 0x6240, 0x62c9, 0x62c9, 0x6492, 0x6492, 0x654f, 0x654f,
    0x6587, 0x6587, 0x65af, 0x65af, 0x65b9, 0x65b9, 0x65e5, 0x65e5, 0x65f6, 0x65f6, 0x661f, 0x661f, 0x662f, 0x662f, 0x6642, 0x6642,
    0x66dc, 0x66dc, 0x6700, 0x6700, 0x6708, 0x6709, 0x671f, 0x671f, 0x6728, 0x6728, 0x672c, 0x672c, 0x6765, 0x6765, 0x683c, 0x683c,
    0x6863, 0x6863, 0x6885, 0x6885, 0x6a19, 0x6a19, 0x6a21, 0x6a21, 0x6b21, 0x6b21, 0x6b64, 0x6b64, 0x6beb, 0x6beb, 0x6c14, 0x6c14,
    0x6c17, 0x6c17, 0x6c23, 0x6c23, 0x6c34, 0x6c34, 0x6c92, 0x6c92, 0x6ce2, 0x6ce2, 0x6d41, 0x6d41, 0x6d4b, 0x6d4b, 0x6d77, 0x6d77,
    0x6e1b, 0x6e1b, 0x6e2c, 0x6e2c, 0x6e38, 0x6e38, 0x706b, 0x706b, 0x7136, 0x7136, 0x723e, 0x723e, 0x7248, 0x7248, 0x72d0, 0x72d0,
    0x73a9, 0x73a9, 0x73c2, 0x73c2, 0x7403, 0x7403, 0x7409, 0x7409, 0x74e6, 0x74e6, 0x7684, 0x7684, 0x76d7, 0x76d7, 0x79cd, 0x79cd,
    0x7a2e, 0x7a2e, 0x7a57, 0x7a57, 0x7ad9, 0x7ad9, 0x7b80, 0x7b80, 0x7c64, 0x7c64, 0x7cbe, 0x7cbe, 0x7d42, 0x7d42, 0x7e41, 0x7e41,
    0x7ee2, 0x7ee2, 0x7ef5, 0x7ef5, 0x7f51, 0x7f51, 0x7fa4, 0x7fa4, 0x8005, 0x8005, 0x840a, 0x840a, 0x841d, 0x841d, 0x8514, 0x8514,
    0x851a, 0x851a, 0x859b, 0x859b, 0x863f, 0x863f, 0x8868, 0x8868, 0x8a00, 0x8a00, 0x8a2a, 0x8a2a, 0x8a9e, 0x8a9e, 0x8af8, 0x8af8,
    0x8bbf, 0x8bbf, 0x8bed, 0x8bed, 0x8cb7, 0x8cb7, 0x8cfc, 0x8cfc, 0x8d2c, 0x8d2c, 0x8d8b, 0x8d8b, 0x8e22, 0x8e22, 0x8f15, 0x8f15,
    0x8f38, 0x8f38, 0x8f93, 0x8f93, 0x8fc7, 0x8fc7, 0x8fd9, 0x8fd9, 0x9031, 0x9031, 0x904e, 0x904e, 0x905e, 0x905e, 0x91d1, 0x91d1,
    0x9593, 0x9593, 0x95f4, 0x95f4, 0x96e8, 0x96e8, 0x96f7, 0x96f7, 0x9748, 0x9748, 0x9769, 0x9769, 0x9810, 0x9810, 0x9884, 0x9884,
    0x9a86, 0x9a86, 0x9ad4, 0x9ad4, 0x9ad8, 0x9ad8, 0x9f99, 0x9f99, 0xac00, 0xac00, 0xac04, 0xac04, 0xac10, 0xac10, 0xac1d, 0xac1d,
    0xaca9, 0xaca9, 0xace0, 0xace0, 0xad6c, 0xad6d, 0xade0, 0xade0, 0xae08, 0xae08, 0xae68, 0xae68, 0xb0a0, 0xb0a0, 0xb0a8, 0xb0a8,
    0xb298, 0xb298, 0xb2c8, 0xb2c8, 0xb300, 0xb300, 0xb3d9, 0xb3d9, 0xb41c, 0xb41c, 0xb77c, 0xb77c, 0xb798, 0xb798, 0xb808, 0xb808,
    0xb825, 0xb825, 0xb97c, 0xb97c, 0xb9ad, 0xb9ad, 0xb9c8, 0xb9c9, 0xb9e4, 0xb9e4, 0xbaa9, 0xbaa9, 0xbb34, 0xbb34, 0xbb38, 0xbb38,
    0xbc0f, 0xbc0f, 0xbc18, 0xbc18, 0xbc29, 0xbc29, 0xbc84, 0xbc84, 0xbcc0, 0xbcc0, 0xbd09, 0xbd09, 0xbd80, 0xbd81, 0xbe48, 0xbe48,
    0xc0ac, 0xc0ac, 0xc11c, 0xc11c, 0xc131, 0xc131, 0xc138, 0xc138, 0xc18c, 0xc18c, 0xc218, 0xc219, 0xc21c, 0xc21c, 0xc2a4, 0xc2a4,
    0xc2dc, 0xc2dc, 0xc528, 0xc528, 0xc557, 0xc557, 0xc5b4, 0xc5b4, 0xc5b8, 0xc5b8, 0xc5c6, 0xc5c6, 0xc5d0, 0xc5d0, 0xc5ec, 0xc5ec,
    0xc624, 0xc625, 0xc628, 0xc628, 0xc694, 0xc694, 0xc6b0, 0xc6b1, 0xc6d4, 0xc6d4, 0xc720, 0xc720, 0xc740, 0xc740, 0xc744, 0xc744,
    0xc74c, 0xc74c, 0xc758, 0xc758, 0xc774, 0xc774, 0xc778, 0xc778, 0xc77c, 0xc77c, 0xc785, 0xc785, 0xc791, 0xc791, 0xc7a5, 0xc7a5,
    0xc800, 0xc801, 0xc804, 0xc804, 0xc8e0, 0xc8e0, 0xc8fc, 0xc8fc, 0xc9c0, 0xc9c0, 0xcc28, 0xcc28, 0xcd5c, 0xcd5c, 0xd070, 0xd070,
    0xd1a0, 0xd1a0, 0xd2b8, 0xd2b8, 0xd2f4, 0xd2f4, 0xd301, 0xd301, 0xd30c, 0xd30c, 0xd328, 0xd328, 0xd3c9, 0xd3c9, 0xd558, 0xd558,
    0xd55c, 0xd55c, 0xd574, 0xd574, 0xd654, 0xd655, 0xd6c4, 0xd6c4, 0xff01, 0xff01, 0xff0c, 0xff0c, 0xff1a, 0xff1a,
};

void handleAppletHook(AppletHookType type, void *param) {
    if (type != AppletHookType_OnOperationMode)
        return;

    switch (appletGetOperationMode()) {
        default:
        case AppletOperationMode_Handheld:
            // use handheld mode resolution (720p) and scale
            s_width  = 1280.0f, s_height = 720.0f;
            ImGui::GetStyle().ScaleAllSizes(1.9f / 2.6f);
            ImGui::GetIO().FontGlobalScale = 0.9f;
            break;

        case AppletOperationMode_Console:
            // use docked mode resolution (1080p) and scale
            s_width  = 1920.0f, s_height = 1080.0f;
            ImGui::GetStyle().ScaleAllSizes(2.6f / 1.9f);
            ImGui::GetIO().FontGlobalScale = 1.6f;
            break;
    }
}

void updateTouch(ImGuiIO &io_) {
    // read touch positions
    HidTouchScreenState state = {0};
    auto count = hidGetTouchScreenStates(&state, 1);
    if (count < 1 || state.count < 1) {
        io_.MouseDown[0] = false;
        return;
    }

    // set mouse position to touch point
    s_mousePos = ImVec2(state.touches[0].x, state.touches[0].y);
    io_.MouseDown[0] = true;
}

void updateKeys(ImGuiIO &io_) {
    constexpr std::array mapping = {
        std::pair(ImGuiNavInput_Activate,  HidNpadButton_A),
        std::pair(ImGuiNavInput_Cancel,    HidNpadButton_B),
        std::pair(ImGuiNavInput_Input,     HidNpadButton_X),
        std::pair(ImGuiNavInput_Menu,      HidNpadButton_Y),
        std::pair(ImGuiNavInput_FocusPrev, HidNpadButton_L),
        std::pair(ImGuiNavInput_TweakSlow, HidNpadButton_L),
        std::pair(ImGuiNavInput_FocusNext, HidNpadButton_R),
        std::pair(ImGuiNavInput_TweakFast, HidNpadButton_R),
        std::pair(ImGuiNavInput_DpadUp,    HidNpadButton_Up),
        std::pair(ImGuiNavInput_DpadRight, HidNpadButton_Right),
        std::pair(ImGuiNavInput_DpadDown,  HidNpadButton_Down),
        std::pair(ImGuiNavInput_DpadLeft,  HidNpadButton_Left),
    };

    padUpdate(&s_pad);
    auto down = padGetButtonsDown(&s_pad);

    for (auto [im, nx]: mapping)
        if (down & nx)
            io_.NavInputs[im] = 1.0f;
}

} // namespace

bool imgui::nx::init() {
    padConfigureInput(1, HidNpadStyleSet_NpadStandard);
    padInitializeDefault(&s_pad);

    auto &io = ImGui::GetIO();

    // Load nintendo font
    PlFontData standard, /* extended, */ chinese, korean;
    // static ImWchar extended_range[] = {0xe000, 0xe152};
    if (R_SUCCEEDED(plGetSharedFontByType(&standard,     PlSharedFontType_Standard)) &&
            // R_SUCCEEDED(plGetSharedFontByType(&extended, PlSharedFontType_NintendoExt)) &&
            R_SUCCEEDED(plGetSharedFontByType(&chinese,  PlSharedFontType_ChineseSimplified)) &&
            R_SUCCEEDED(plGetSharedFontByType(&korean,   PlSharedFontType_KO))) {
        std::uint8_t *px;
        int w, h, bpp;
        ImFontConfig font_cfg;

        font_cfg.FontDataOwnedByAtlas = false;
        io.Fonts->AddFontFromMemoryTTF(standard.address, standard.size, 20.0f, &font_cfg, io.Fonts->GetGlyphRangesDefault());
        font_cfg.MergeMode            = true;
        // io.Fonts->AddFontFromMemoryTTF(extended.address, extended.size, 20.0f, &font_cfg, extended_range);
        io.Fonts->AddFontFromMemoryTTF(chinese.address,  chinese.size,  20.0f, &font_cfg, nxFontRanges);
        io.Fonts->AddFontFromMemoryTTF(korean.address,   korean.size,   20.0f, &font_cfg, nxFontRanges);

        // build font atlas
        io.Fonts->GetTexDataAsAlpha8(&px, &w, &h, &bpp);
        io.Fonts->Flags |= ImFontAtlasFlags_NoPowerOfTwoHeight;
        io.Fonts->Build();
    }

    auto &style = ImGui::GetStyle();
    style.WindowRounding = 0.0f;

    auto mode = appletGetOperationMode();
    if (mode == AppletOperationMode_Handheld) {
        s_width  = 1280.0f, s_height = 720.0f;
        style.ScaleAllSizes(1.9f);
        io.FontGlobalScale = 0.9f;
    } else {
        s_width  = 1920.0f, s_height = 1080.0f;
        style.ScaleAllSizes(2.6f);
        io.FontGlobalScale = 1.6f;
    }

    // initialize applet hooks
    appletHook(&s_appletHookCookie, handleAppletHook, nullptr);

    // disable imgui.ini file
    io.IniFilename = nullptr;

    // setup config flags
    io.ConfigFlags |= ImGuiConfigFlags_IsTouchScreen;
	io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;

    io.BackendFlags |= ImGuiBackendFlags_HasGamepad;

    // disable mouse cursor
    io.MouseDrawCursor = false;

    return true;
}

std::uint64_t imgui::nx::newFrame() {
    auto &io = ImGui::GetIO();

    // setup display metrics
    io.DisplaySize             = ImVec2(s_width, s_height);
    io.DisplayFramebufferScale = ImVec2(1.0f, 1.0f);

    // time step
    static auto const start = std::chrono::steady_clock::now();
    static auto prev        = start;
    auto const now          = std::chrono::steady_clock::now();

    io.DeltaTime = std::chrono::duration<float> (now - prev).count();
    prev         = now;

    // update inputs
    updateTouch(io);
    updateKeys(io);

    // clamp mouse to screen
    s_mousePos.x = std::clamp(s_mousePos.x, 0.0f, s_width);
    s_mousePos.y = std::clamp(s_mousePos.y, 0.0f, s_height);
    io.MousePos  = s_mousePos;

    return padGetButtonsDown(&s_pad);
}

void imgui::nx::exit() {
    // deinitialize applet hooks
    appletUnhook(&s_appletHookCookie);
}
